////////////////////////////////////////////////////////////////////////////////
// NOTE : Generated by slothjson. It is NOT supposed to modify this file.
////////////////////////////////////////////////////////////////////////////////
#ifndef __algorithmunitmanage_20171018152954_h__
#define __algorithmunitmanage_20171018152954_h__

#include "slothjson.hpp"

namespace slothjson {

struct alg_unit_t
{
    std::string unid;
    std::string refid;
    std::string cate;
    std::string algid;
    std::string version;
    std::string name;
    std::string note;
    int comb_pos;
    std::string file_name;
    std::string upload_dt;

    void skip_unid() { __skip_unid = true; }
    void skip_refid() { __skip_refid = true; }
    void skip_cate() { __skip_cate = true; }
    void skip_algid() { __skip_algid = true; }
    void skip_version() { __skip_version = true; }
    void skip_name() { __skip_name = true; }
    void skip_note() { __skip_note = true; }
    void skip_comb_pos() { __skip_comb_pos = true; }
    void skip_file_name() { __skip_file_name = true; }
    void skip_upload_dt() { __skip_upload_dt = true; }

    bool json_has_unid() const { return __json_has_unid; }
    bool json_has_refid() const { return __json_has_refid; }
    bool json_has_cate() const { return __json_has_cate; }
    bool json_has_algid() const { return __json_has_algid; }
    bool json_has_version() const { return __json_has_version; }
    bool json_has_name() const { return __json_has_name; }
    bool json_has_note() const { return __json_has_note; }
    bool json_has_comb_pos() const { return __json_has_comb_pos; }
    bool json_has_file_name() const { return __json_has_file_name; }
    bool json_has_upload_dt() const { return __json_has_upload_dt; }

    alg_unit_t();
    alg_unit_t& operator=(const alg_unit_t& obj_val);
    bool operator==(const alg_unit_t& obj_val) const;
    bool encode(allocator_t& alloc, rapidjson::Value& json_val) const;
    bool decode(const rapidjson::Value& json_val);
    bool encode_to_string(std::string& json_str) const;
    bool decode_from_string(const std::string& json_str);

private:
    bool __skip_unid;
    bool __skip_refid;
    bool __skip_cate;
    bool __skip_algid;
    bool __skip_version;
    bool __skip_name;
    bool __skip_note;
    bool __skip_comb_pos;
    bool __skip_file_name;
    bool __skip_upload_dt;

    bool __json_has_unid;
    bool __json_has_refid;
    bool __json_has_cate;
    bool __json_has_algid;
    bool __json_has_version;
    bool __json_has_name;
    bool __json_has_note;
    bool __json_has_comb_pos;
    bool __json_has_file_name;
    bool __json_has_upload_dt;
};

bool encode(const alg_unit_t& obj_val, allocator_t& alloc, rapidjson::Value& json_val);
bool decode(const rapidjson::Value& json_val, alg_unit_t& obj_val);
bool encode(const std::vector<alg_unit_t>& obj_val, allocator_t& alloc, rapidjson::Value& json_val);
bool decode(const rapidjson::Value& json_val, std::vector<alg_unit_t>& obj_val);
bool encode(const  std::vector<alg_unit_t>& obj_val,std::string& json_str);
bool decode(const std::string& json_str, std::vector<alg_unit_t>& obj_val);

struct alg_unit_list_t
{
    std::vector<alg_unit_t > algo_list;

    void skip_algo_list() { __skip_algo_list = true; }

    bool json_has_algo_list() const { return __json_has_algo_list; }

    alg_unit_list_t();
    alg_unit_list_t& operator=(const alg_unit_list_t& obj_val);
    bool operator==(const alg_unit_list_t& obj_val) const;
    bool encode(allocator_t& alloc, rapidjson::Value& json_val) const;
    bool decode(const rapidjson::Value& json_val);
    bool encode_to_string(std::string& json_str) const;
    bool decode_from_string(const std::string& json_str);

private:
    bool __skip_algo_list;

    bool __json_has_algo_list;
};

bool encode(const alg_unit_list_t& obj_val, allocator_t& alloc, rapidjson::Value& json_val);
bool decode(const rapidjson::Value& json_val, alg_unit_list_t& obj_val);
bool encode(const std::vector<alg_unit_list_t>& obj_val, allocator_t& alloc, rapidjson::Value& json_val);
bool decode(const rapidjson::Value& json_val, std::vector<alg_unit_list_t>& obj_val);
bool encode(const  std::vector<alg_unit_list_t>& obj_val,std::string& json_str);
bool decode(const std::string& json_str, std::vector<alg_unit_list_t>& obj_val);

struct alg_unit_get_list_response_t
{
    int err_code;
    std::string err_msg;
    std::string cmd;
    std::vector<alg_unit_t > algo_info;

    void skip_err_code() { __skip_err_code = true; }
    void skip_err_msg() { __skip_err_msg = true; }
    void skip_cmd() { __skip_cmd = true; }
    void skip_algo_info() { __skip_algo_info = true; }

    bool json_has_err_code() const { return __json_has_err_code; }
    bool json_has_err_msg() const { return __json_has_err_msg; }
    bool json_has_cmd() const { return __json_has_cmd; }
    bool json_has_algo_info() const { return __json_has_algo_info; }

    alg_unit_get_list_response_t();
    alg_unit_get_list_response_t& operator=(const alg_unit_get_list_response_t& obj_val);
    bool operator==(const alg_unit_get_list_response_t& obj_val) const;
    bool encode(allocator_t& alloc, rapidjson::Value& json_val) const;
    bool decode(const rapidjson::Value& json_val);
    bool encode_to_string(std::string& json_str) const;
    bool decode_from_string(const std::string& json_str);

private:
    bool __skip_err_code;
    bool __skip_err_msg;
    bool __skip_cmd;
    bool __skip_algo_info;

    bool __json_has_err_code;
    bool __json_has_err_msg;
    bool __json_has_cmd;
    bool __json_has_algo_info;
};

bool encode(const alg_unit_get_list_response_t& obj_val, allocator_t& alloc, rapidjson::Value& json_val);
bool decode(const rapidjson::Value& json_val, alg_unit_get_list_response_t& obj_val);
bool encode(const std::vector<alg_unit_get_list_response_t>& obj_val, allocator_t& alloc, rapidjson::Value& json_val);
bool decode(const rapidjson::Value& json_val, std::vector<alg_unit_get_list_response_t>& obj_val);
bool encode(const  std::vector<alg_unit_get_list_response_t>& obj_val,std::string& json_str);
bool decode(const std::string& json_str, std::vector<alg_unit_get_list_response_t>& obj_val);

struct alg_unit_req_brief_t
{
    std::string refid;
    std::string cate;

    void skip_refid() { __skip_refid = true; }
    void skip_cate() { __skip_cate = true; }

    bool json_has_refid() const { return __json_has_refid; }
    bool json_has_cate() const { return __json_has_cate; }

    alg_unit_req_brief_t();
    alg_unit_req_brief_t& operator=(const alg_unit_req_brief_t& obj_val);
    bool operator==(const alg_unit_req_brief_t& obj_val) const;
    bool encode(allocator_t& alloc, rapidjson::Value& json_val) const;
    bool decode(const rapidjson::Value& json_val);
    bool encode_to_string(std::string& json_str) const;
    bool decode_from_string(const std::string& json_str);

private:
    bool __skip_refid;
    bool __skip_cate;

    bool __json_has_refid;
    bool __json_has_cate;
};

bool encode(const alg_unit_req_brief_t& obj_val, allocator_t& alloc, rapidjson::Value& json_val);
bool decode(const rapidjson::Value& json_val, alg_unit_req_brief_t& obj_val);
bool encode(const std::vector<alg_unit_req_brief_t>& obj_val, allocator_t& alloc, rapidjson::Value& json_val);
bool decode(const rapidjson::Value& json_val, std::vector<alg_unit_req_brief_t>& obj_val);
bool encode(const  std::vector<alg_unit_req_brief_t>& obj_val,std::string& json_str);
bool decode(const std::string& json_str, std::vector<alg_unit_req_brief_t>& obj_val);

struct alg_unit_brief_req_msg_t
{
    std::string cmd;
    std::vector<alg_unit_req_brief_t > algo_info;

    void skip_cmd() { __skip_cmd = true; }
    void skip_algo_info() { __skip_algo_info = true; }

    bool json_has_cmd() const { return __json_has_cmd; }
    bool json_has_algo_info() const { return __json_has_algo_info; }

    alg_unit_brief_req_msg_t();
    alg_unit_brief_req_msg_t& operator=(const alg_unit_brief_req_msg_t& obj_val);
    bool operator==(const alg_unit_brief_req_msg_t& obj_val) const;
    bool encode(allocator_t& alloc, rapidjson::Value& json_val) const;
    bool decode(const rapidjson::Value& json_val);
    bool encode_to_string(std::string& json_str) const;
    bool decode_from_string(const std::string& json_str);

private:
    bool __skip_cmd;
    bool __skip_algo_info;

    bool __json_has_cmd;
    bool __json_has_algo_info;
};

bool encode(const alg_unit_brief_req_msg_t& obj_val, allocator_t& alloc, rapidjson::Value& json_val);
bool decode(const rapidjson::Value& json_val, alg_unit_brief_req_msg_t& obj_val);
bool encode(const std::vector<alg_unit_brief_req_msg_t>& obj_val, allocator_t& alloc, rapidjson::Value& json_val);
bool decode(const rapidjson::Value& json_val, std::vector<alg_unit_brief_req_msg_t>& obj_val);
bool encode(const  std::vector<alg_unit_brief_req_msg_t>& obj_val,std::string& json_str);
bool decode(const std::string& json_str, std::vector<alg_unit_brief_req_msg_t>& obj_val);

struct alg_unit_brief_request_t
{
    alg_unit_brief_req_msg_t request;

    void skip_request() { __skip_request = true; }

    bool json_has_request() const { return __json_has_request; }

    alg_unit_brief_request_t();
    alg_unit_brief_request_t& operator=(const alg_unit_brief_request_t& obj_val);
    bool operator==(const alg_unit_brief_request_t& obj_val) const;
    bool encode(allocator_t& alloc, rapidjson::Value& json_val) const;
    bool decode(const rapidjson::Value& json_val);
    bool encode_to_string(std::string& json_str) const;
    bool decode_from_string(const std::string& json_str);

private:
    bool __skip_request;

    bool __json_has_request;
};

bool encode(const alg_unit_brief_request_t& obj_val, allocator_t& alloc, rapidjson::Value& json_val);
bool decode(const rapidjson::Value& json_val, alg_unit_brief_request_t& obj_val);
bool encode(const std::vector<alg_unit_brief_request_t>& obj_val, allocator_t& alloc, rapidjson::Value& json_val);
bool decode(const rapidjson::Value& json_val, std::vector<alg_unit_brief_request_t>& obj_val);
bool encode(const  std::vector<alg_unit_brief_request_t>& obj_val,std::string& json_str);
bool decode(const std::string& json_str, std::vector<alg_unit_brief_request_t>& obj_val);

struct alg_unit_list_info_t
{
    std::vector<alg_unit_t > algo_info;

    void skip_algo_info() { __skip_algo_info = true; }

    bool json_has_algo_info() const { return __json_has_algo_info; }

    alg_unit_list_info_t();
    alg_unit_list_info_t& operator=(const alg_unit_list_info_t& obj_val);
    bool operator==(const alg_unit_list_info_t& obj_val) const;
    bool encode(allocator_t& alloc, rapidjson::Value& json_val) const;
    bool decode(const rapidjson::Value& json_val);
    bool encode_to_string(std::string& json_str) const;
    bool decode_from_string(const std::string& json_str);

private:
    bool __skip_algo_info;

    bool __json_has_algo_info;
};

bool encode(const alg_unit_list_info_t& obj_val, allocator_t& alloc, rapidjson::Value& json_val);
bool decode(const rapidjson::Value& json_val, alg_unit_list_info_t& obj_val);
bool encode(const std::vector<alg_unit_list_info_t>& obj_val, allocator_t& alloc, rapidjson::Value& json_val);
bool decode(const rapidjson::Value& json_val, std::vector<alg_unit_list_info_t>& obj_val);
bool encode(const  std::vector<alg_unit_list_info_t>& obj_val,std::string& json_str);
bool decode(const std::string& json_str, std::vector<alg_unit_list_info_t>& obj_val);

struct alg_unit_brief_response_t
{
    int err_code;
    std::string err_msg;
    std::string cmd;
    alg_unit_list_info_t response;

    void skip_err_code() { __skip_err_code = true; }
    void skip_err_msg() { __skip_err_msg = true; }
    void skip_cmd() { __skip_cmd = true; }
    void skip_response() { __skip_response = true; }

    bool json_has_err_code() const { return __json_has_err_code; }
    bool json_has_err_msg() const { return __json_has_err_msg; }
    bool json_has_cmd() const { return __json_has_cmd; }
    bool json_has_response() const { return __json_has_response; }

    alg_unit_brief_response_t();
    alg_unit_brief_response_t& operator=(const alg_unit_brief_response_t& obj_val);
    bool operator==(const alg_unit_brief_response_t& obj_val) const;
    bool encode(allocator_t& alloc, rapidjson::Value& json_val) const;
    bool decode(const rapidjson::Value& json_val);
    bool encode_to_string(std::string& json_str) const;
    bool decode_from_string(const std::string& json_str);

private:
    bool __skip_err_code;
    bool __skip_err_msg;
    bool __skip_cmd;
    bool __skip_response;

    bool __json_has_err_code;
    bool __json_has_err_msg;
    bool __json_has_cmd;
    bool __json_has_response;
};

bool encode(const alg_unit_brief_response_t& obj_val, allocator_t& alloc, rapidjson::Value& json_val);
bool decode(const rapidjson::Value& json_val, alg_unit_brief_response_t& obj_val);
bool encode(const std::vector<alg_unit_brief_response_t>& obj_val, allocator_t& alloc, rapidjson::Value& json_val);
bool decode(const rapidjson::Value& json_val, std::vector<alg_unit_brief_response_t>& obj_val);
bool encode(const  std::vector<alg_unit_brief_response_t>& obj_val,std::string& json_str);
bool decode(const std::string& json_str, std::vector<alg_unit_brief_response_t>& obj_val);

struct server_ip_vector_t
{
    std::vector<std::vector<std::string > > server_ip;

    void skip_server_ip() { __skip_server_ip = true; }

    bool json_has_server_ip() const { return __json_has_server_ip; }

    server_ip_vector_t();
    server_ip_vector_t& operator=(const server_ip_vector_t& obj_val);
    bool operator==(const server_ip_vector_t& obj_val) const;
    bool encode(allocator_t& alloc, rapidjson::Value& json_val) const;
    bool decode(const rapidjson::Value& json_val);
    bool encode_to_string(std::string& json_str) const;
    bool decode_from_string(const std::string& json_str);

private:
    bool __skip_server_ip;

    bool __json_has_server_ip;
};

bool encode(const server_ip_vector_t& obj_val, allocator_t& alloc, rapidjson::Value& json_val);
bool decode(const rapidjson::Value& json_val, server_ip_vector_t& obj_val);
bool encode(const std::vector<server_ip_vector_t>& obj_val, allocator_t& alloc, rapidjson::Value& json_val);
bool decode(const rapidjson::Value& json_val, std::vector<server_ip_vector_t>& obj_val);
bool encode(const  std::vector<server_ip_vector_t>& obj_val,std::string& json_str);
bool decode(const std::string& json_str, std::vector<server_ip_vector_t>& obj_val);

struct server_ip_list_response_t
{
    int err_code;
    std::string err_msg;
    std::string cmd;
    server_ip_vector_t response;

    void skip_err_code() { __skip_err_code = true; }
    void skip_err_msg() { __skip_err_msg = true; }
    void skip_cmd() { __skip_cmd = true; }
    void skip_response() { __skip_response = true; }

    bool json_has_err_code() const { return __json_has_err_code; }
    bool json_has_err_msg() const { return __json_has_err_msg; }
    bool json_has_cmd() const { return __json_has_cmd; }
    bool json_has_response() const { return __json_has_response; }

    server_ip_list_response_t();
    server_ip_list_response_t& operator=(const server_ip_list_response_t& obj_val);
    bool operator==(const server_ip_list_response_t& obj_val) const;
    bool encode(allocator_t& alloc, rapidjson::Value& json_val) const;
    bool decode(const rapidjson::Value& json_val);
    bool encode_to_string(std::string& json_str) const;
    bool decode_from_string(const std::string& json_str);

private:
    bool __skip_err_code;
    bool __skip_err_msg;
    bool __skip_cmd;
    bool __skip_response;

    bool __json_has_err_code;
    bool __json_has_err_msg;
    bool __json_has_cmd;
    bool __json_has_response;
};

bool encode(const server_ip_list_response_t& obj_val, allocator_t& alloc, rapidjson::Value& json_val);
bool decode(const rapidjson::Value& json_val, server_ip_list_response_t& obj_val);
bool encode(const std::vector<server_ip_list_response_t>& obj_val, allocator_t& alloc, rapidjson::Value& json_val);
bool decode(const rapidjson::Value& json_val, std::vector<server_ip_list_response_t>& obj_val);
bool encode(const  std::vector<server_ip_list_response_t>& obj_val,std::string& json_str);
bool decode(const std::string& json_str, std::vector<server_ip_list_response_t>& obj_val);

struct parent_server_t
{
    std::string ip;
    std::string serial_num;

    void skip_ip() { __skip_ip = true; }
    void skip_serial_num() { __skip_serial_num = true; }

    bool json_has_ip() const { return __json_has_ip; }
    bool json_has_serial_num() const { return __json_has_serial_num; }

    parent_server_t();
    parent_server_t& operator=(const parent_server_t& obj_val);
    bool operator==(const parent_server_t& obj_val) const;
    bool encode(allocator_t& alloc, rapidjson::Value& json_val) const;
    bool decode(const rapidjson::Value& json_val);
    bool encode_to_string(std::string& json_str) const;
    bool decode_from_string(const std::string& json_str);

private:
    bool __skip_ip;
    bool __skip_serial_num;

    bool __json_has_ip;
    bool __json_has_serial_num;
};

bool encode(const parent_server_t& obj_val, allocator_t& alloc, rapidjson::Value& json_val);
bool decode(const rapidjson::Value& json_val, parent_server_t& obj_val);
bool encode(const std::vector<parent_server_t>& obj_val, allocator_t& alloc, rapidjson::Value& json_val);
bool decode(const rapidjson::Value& json_val, std::vector<parent_server_t>& obj_val);
bool encode(const  std::vector<parent_server_t>& obj_val,std::string& json_str);
bool decode(const std::string& json_str, std::vector<parent_server_t>& obj_val);

struct parent_server_response_t
{
    int err_code;
    std::string err_msg;
    std::string cmd;
    parent_server_t response;

    void skip_err_code() { __skip_err_code = true; }
    void skip_err_msg() { __skip_err_msg = true; }
    void skip_cmd() { __skip_cmd = true; }
    void skip_response() { __skip_response = true; }

    bool json_has_err_code() const { return __json_has_err_code; }
    bool json_has_err_msg() const { return __json_has_err_msg; }
    bool json_has_cmd() const { return __json_has_cmd; }
    bool json_has_response() const { return __json_has_response; }

    parent_server_response_t();
    parent_server_response_t& operator=(const parent_server_response_t& obj_val);
    bool operator==(const parent_server_response_t& obj_val) const;
    bool encode(allocator_t& alloc, rapidjson::Value& json_val) const;
    bool decode(const rapidjson::Value& json_val);
    bool encode_to_string(std::string& json_str) const;
    bool decode_from_string(const std::string& json_str);

private:
    bool __skip_err_code;
    bool __skip_err_msg;
    bool __skip_cmd;
    bool __skip_response;

    bool __json_has_err_code;
    bool __json_has_err_msg;
    bool __json_has_cmd;
    bool __json_has_response;
};

bool encode(const parent_server_response_t& obj_val, allocator_t& alloc, rapidjson::Value& json_val);
bool decode(const rapidjson::Value& json_val, parent_server_response_t& obj_val);
bool encode(const std::vector<parent_server_response_t>& obj_val, allocator_t& alloc, rapidjson::Value& json_val);
bool decode(const rapidjson::Value& json_val, std::vector<parent_server_response_t>& obj_val);
bool encode(const  std::vector<parent_server_response_t>& obj_val,std::string& json_str);
bool decode(const std::string& json_str, std::vector<parent_server_response_t>& obj_val);

} // namespace slothjson

#endif // __algorithmunitmanage_20171018152954_h__